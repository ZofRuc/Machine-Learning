# -*- coding: utf-8 -*-
"""Projekt8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15mTPreE6uVup_jtpkfEYMgLCYf7SwrtG
"""

!pip install google-colab

import cv2
import numpy
import imutils
from google.colab.patches import cv2_imshow

ja = cv2.imread('ja.jpg')

gray = cv2.cvtColor(ja, cv2.COLOR_BGR2GRAY)

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

faces = face_cascade.detectMultiScale(gray, scaleFactor=1.05, minNeighbors=5, minSize=(50,50))

for (x,y,w,h) in faces:
    cv2.rectangle(ja,(x,y),(x+w,y+h),(255,0,0),2)

cv2_imshow(ja)
cv2.waitKey(0)

# Ładowanie kaskad kaskadowych dla detekcji twarzy, oczu i uśmiechu
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_eye.xml')
smile_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_smile.xml')

# Ładowanie obrazu
florek = cv2.imread('florek.jpg')

# Konwersja do skali szarości
gray = cv2.cvtColor(florek, cv2.COLOR_BGR2GRAY)

# Detekcja twarzy na obrazie
faces = face_cascade.detectMultiScale(gray, 1.3, 5)

# Zliczanie liczby wykrytych osób
num_people = len(faces)

# Rysowanie prostokątów wokół twarzy, oczu i uśmiechu
for (x, y, w, h) in faces:
    cv2.rectangle(florek, (x, y), (x+w, y+h), (255, 0, 0), 2)
    roi_gray = gray[y:y+h, x:x+w]
    roi_color = florek[y:y+h, x:x+w]
    eyes = eye_cascade.detectMultiScale(roi_gray)
    for (ex, ey, ew, eh) in eyes:
        cv2.rectangle(roi_color, (ex, ey), (ex+ew, ey+eh), (0, 255, 0), 2)
    smiles = smile_cascade.detectMultiScale(roi_gray, scaleFactor=1.7, minNeighbors=22)
    for (sx, sy, sw, sh) in smiles:
        cv2.rectangle(roi_color, (sx, sy), (sx+sw, sy+sh), (0, 0, 255), 2)

# Wyświetlanie wyniku
cv2_imshow(florek)
cv2.waitKey()
cv2.destroyAllWindows()

# Wyświetlanie liczby osób na obrazie
print("Liczba wykrytych osób: ", num_people)

from google.colab import files

# inicjalizacja klasyfikatora kaskadowego
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_default.xml')

# wczytywanie pliku wideo
cap = cv2.VideoCapture('kamerkaML.mp4')

# przetwarzanie klatka po klatce
while True:
    # wczytywanie kolejnej klatki
    ret, frame = cap.read()
    if not ret:
        break
        
    # konwersja klatki do skali szarości
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # wykrywanie twarzy
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)
    
    # rysowanie prostokątów wokół wykrytych twarzy
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
    
    # wyświetlanie klatki z zaznaczonymi twarzami
    cv2_imshow(frame)
    
    # przerwanie pętli po naciśnięciu klawisza 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
        
# zwalnianie zasobów
cap.release()
cv2.destroyAllWindows()

# inicjalizacja klasyfikatora kaskadowego
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_frontalface_default.xml')

# wczytywanie pliku wideo
cap = cv2.VideoCapture('filmik.mp4')

# przetwarzanie klatka po klatce
while True:
    # wczytywanie kolejnej klatki
    ret, frame = cap.read()
    if not ret:
        break
        
    # wykrycie ludzi na klatce
    humans = human_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5)
    
    # narysowanie prostokątów wokół wykrytych ludzi
    for (x,y,w,h) in humans:
        cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2)
    
    # wyświetlanie klatki z zaznaczonymi twarzami
    cv2_imshow(frame)
    
    # przerwanie pętli po naciśnięciu klawisza 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
        
# zwalnianie zasobów
cap.release()
cv2.destroyAllWindows()