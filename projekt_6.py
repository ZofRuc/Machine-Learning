# -*- coding: utf-8 -*-
"""Projekt_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KYYtYyQsdDFzbFgFIQOoCUi10drKQBAX
"""

from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
import pandas as pd
from sklearn.metrics import accuracy_score

"""Jądra SVM dla danych Iris"""

# Załadowanie zbioru danych
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Podział zbioru na zbiór treningowy i testowy
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

# Definicja klasyfikatora z jądrem liniowym
linear_svm = svm.SVC(kernel='linear')

# Trenowanie modelu z jądrem liniowym
linear_svm.fit(X_train, y_train)

# Definicja klasyfikatora z jądrem RBF (radial basis function)
rbf_svm = svm.SVC(kernel='rbf')

# Trenowanie modelu z jądrem RBF
rbf_svm.fit(X_train, y_train)

# Definicja klasyfikatora z jądrem wielomianowym
poly_svm = svm.SVC(kernel='poly', degree=3)

# Trenowanie modelu z jądrem wielomianowym
poly_svm.fit(X_train, y_train)

# Definicja klasyfikatora z jądrem sigmoidalnym
sigmoid_svm = svm.SVC(kernel='sigmoid')

# Trenowanie modelu z jądrem sigmoidalnym
sigmoid_svm.fit(X_train, y_train)

# Mierzenie skuteczności modeli na zbiorze testowym
linear_accuracy = linear_svm.score(X_test, y_test)
rbf_accuracy = rbf_svm.score(X_test, y_test)
poly_accuracy = poly_svm.score(X_test, y_test)
sigmoid_accuracy = sigmoid_svm.score(X_test, y_test)

print("Dokładność modelu z jądrem liniowym: ", linear_accuracy)
print("Dokładność modelu z jądrem RBF: ", rbf_accuracy)
print("Dokładność modelu z jądrem wielomianowym: ", poly_accuracy)
print("Dokładność modelu z jądrem sigmoidalnym: ", sigmoid_accuracy)

"""Drzewa decyzyjne dla zbioru Iris"""

# Definicja klasyfikatora drzewa decyzyjnego
tree = DecisionTreeClassifier()

# Trenowanie modelu drzewa decyzyjnego
tree.fit(X_train, y_train)

# Definicja klasyfikatora lasu losowego
rf = RandomForestClassifier(n_estimators=100)

# Trenowanie modelu lasu losowego
rf.fit(X_train, y_train)

# Definicja klasyfikatora Gradient Boosting
gb = GradientBoostingClassifier(n_estimators=100)

# Trenowanie modelu Gradient Boosting
gb.fit(X_train, y_train)

# Mierzenie skuteczności modeli na zbiorze testowym
tree_accuracy = tree.score(X_test, y_test)
rf_accuracy = rf.score(X_test, y_test)
gb_accuracy = gb.score(X_test, y_test)

print("Dokładność modelu drzewa decyzyjnego: ", tree_accuracy)
print("Dokładność modelu lasu losowego: ", rf_accuracy)
print("Dokładność modelu Gradient Boosting: ", gb_accuracy)

"""Inny dateset"""

crimedata = pd.read_csv('crimedata.csv',encoding='latin-1', na_values='?')

crimedata

crimedata = crimedata.fillna(crimedata.mean())

crimedata.shape

# Nieważnie kolumny z nazwami 
crimedata = crimedata.iloc[:, 5:]

crimedata

print(crimedata.dtypes)

crimedata.dtypes[(crimedata.dtypes != 'float64') & (crimedata.dtypes != 'int64')]

crimedata.dtypes[(crimedata.dtypes != 'int64')]

crimedata = crimedata.astype(float)

crimedata.dtypes[(crimedata.dtypes != 'float64')]

crimedata.shape

"""Wyznaczenie ważnych cech"""

from sklearn.ensemble import RandomForestRegressor
import numpy as np

A = crimedata.drop(['ViolentCrimesPerPop'], axis=1)
b = crimedata['ViolentCrimesPerPop']

rf = RandomForestRegressor(n_estimators=100, random_state=42)

rf.fit(A, b)

importances = rf.feature_importances_

indices = np.argsort(importances)[::-1]
columns = A.columns

for i in range(10):
    print(f"{i+1}. {columns[indices[i]]}: {importances[indices[i]]}")

"""Wracamy do SVM"""

crimedata = crimedata[['assaultPerPop', 'robbbPerPop', 'rapes', 'rapesPerPop', 'murdPerPop','OwnOccHiQuart','OwnOccQrange', 'ViolentCrimesPerPop']]

crimedata

X = crimedata.drop(['ViolentCrimesPerPop'], axis=1)  
y = crimedata['ViolentCrimesPerPop']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

SVM = svm.SVR()

SVM.fit(X_train, y_train)

y_pred = SVM.predict(X_test)

from sklearn.metrics import max_error

accuracy = max_error(y_test, y_pred)

print("R^2:", accuracy)